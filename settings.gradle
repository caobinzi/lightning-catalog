rootProject.name = 'lightning-metastore'
include 'spark'

project(':spark').name = 'lightning-spark'


if (null != System.getProperty("allVersions")) {
  System.setProperty("flinkVersions", System.getProperty("knownFlinkVersions"))
  System.setProperty("sparkVersions", System.getProperty("knownSparkVersions"))
  System.setProperty("hiveVersions", System.getProperty("knownHiveVersions"))
}

List<String> knownFlinkVersions = System.getProperty("knownFlinkVersions").split(",")
String flinkVersionsString = System.getProperty("flinkVersions") != null ? System.getProperty("flinkVersions") : System.getProperty("defaultFlinkVersions")
List<String> flinkVersions = flinkVersionsString != null && !flinkVersionsString.isEmpty() ? flinkVersionsString.split(",") : []

if (!knownFlinkVersions.containsAll(flinkVersions)) {
  throw new GradleException("Found unsupported Flink versions: " + (flinkVersions - knownFlinkVersions))
}

List<String> knownHiveVersions = System.getProperty("knownHiveVersions").split(",")
String hiveVersionsString = System.getProperty("hiveVersions") != null ? System.getProperty("hiveVersions") : System.getProperty("defaultHiveVersions")
List<String> hiveVersions = hiveVersionsString != null && !hiveVersionsString.isEmpty() ? hiveVersionsString.split(",") : []

if (!knownHiveVersions.containsAll(hiveVersions)) {
  throw new GradleException("Found unsupported Hive versions: " + (hiveVersions - knownHiveVersions))
}

List<String> knownSparkVersions = System.getProperty("knownSparkVersions").split(",")
String sparkVersionsString = System.getProperty("sparkVersions") != null ? System.getProperty("sparkVersions") : System.getProperty("defaultSparkVersions")
List<String> sparkVersions = sparkVersionsString != null && !sparkVersionsString.isEmpty() ? sparkVersionsString.split(",") : []

if (!knownSparkVersions.containsAll(sparkVersions)) {
  throw new GradleException("Found unsupported Spark versions: " + (sparkVersions - knownSparkVersions))
}

List<String> knownScalaVersions = System.getProperty("knownScalaVersions").split(",")
String scalaVersion = System.getProperty("scalaVersion") != null ? System.getProperty("scalaVersion") : System.getProperty("defaultScalaVersion")

if (!knownScalaVersions.contains(scalaVersion)) {
  throw new GradleException("Found unsupported Scala version: " + scalaVersion)
}

if (sparkVersions.contains("3.2")) {
  include ":lightning-spark:spark-extensions-3.2_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.2_${scalaVersion}"
  project(":lightning-spark:spark-3.2_${scalaVersion}").projectDir = file('spark/v3.2/spark')
  project(":lightning-spark:spark-3.2_${scalaVersion}").name = "lightning-spark-3.2_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.2_${scalaVersion}").projectDir = file('spark/v3.2/spark-extensions')
  project(":lightning-spark:spark-extensions-3.2_${scalaVersion}").name = "lightning-spark-extensions-3.2_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.2_${scalaVersion}").projectDir = file('spark/v3.2/spark-runtime')
  project(":lightning-spark:spark-runtime-3.2_${scalaVersion}").name = "lightning-spark-runtime-3.2_${scalaVersion}"
}

if (sparkVersions.contains("3.3")) {
  include ":lightning-spark:spark-extensions-3.3_${scalaVersion}"
  include ":lightning-spark:spark-runtime-3.3_${scalaVersion}"
  project(":lightning-spark:spark-extensions-3.3_${scalaVersion}").projectDir = file('spark/v3.3/spark-extensions')
  project(":lightning-spark:spark-extensions-3.3_${scalaVersion}").name = "lightning-spark-extensions-3.3_${scalaVersion}"
  project(":lightning-spark:spark-runtime-3.3_${scalaVersion}").projectDir = file('spark/v3.3/spark-runtime')
  project(":lightning-spark:spark-runtime-3.3_${scalaVersion}").name = "lightning-spark-runtime-3.3_${scalaVersion}"
}

